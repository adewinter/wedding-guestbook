import psycopg2 as pg
from psycopg2.extras import DictCursor
import os
from flask import current_app, g

DATABASE_URL = None

db_connection = None

def init_app(app, _DATABASE_URL):
    global DATABASE_URL
    DATABASE_URL = _DATABASE_URL

    get_db();
    app.teardown_appcontext(close_db)

def close_db(e=None):
    global db_connection

    if db_connection is not None:
        db_connection.close()
        db_connection = None

def connect_db():
    _db_connection = pg.connect(DATABASE_URL, cursor_factory=DictCursor, sslmode='require')
    _db_connection.set_session(autocommit=True)
    return _db_connection


def get_db():
    global db_connection
    if db_connection is None:
        db_connection = connect_db()
    return db_connection


def create_table_if_needed():
    print("In create table if needed()")
    with get_db().cursor() as cursor:
        table_query = """
        CREATE TABLE IF NOT EXISTS guestbook (
        id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        created_at timestamp not null default CURRENT_TIMESTAMP,
        name text,
        message text,
        filename text,
        filetype text,
        s3_object_key text,
        thumbnail_url text,
        cloudflare_uid text,
        cloudflare_status text,
        ready_to_stream text
        );
        """
        cursor.execute(table_query)

        print("Cursor message:", cursor.statusmessage)
    print("Done with create table")


def insert_row(name, message, filename, filetype, s3_object_key, thumbnail_url='', cloudflare_uid='', ready_to_stream=''):
    with get_db().cursor() as cursor:
        insert_query = """
          INSERT INTO guestbook VALUES
            (DEFAULT, DEFAULT, %(name)s, %(message)s, %(filename)s, %(filetype)s, %(s3_object_key)s, %(thumbnail_url)s, %(cloudflare_uid)s, '');
        """
        cursor.execute(insert_query, {'name': name, 'message': message,
                                      'filename': filename,
                                      'filetype': filetype,
                                      's3_object_key': s3_object_key,
                                      'thumbnail_url': thumbnail_url,
                                      'cloudflare_uid': cloudflare_uid})

        result = cursor.statusmessage

    return result

def update_cloudflare_status(s3_object_key, thumbnail_url, cloudflare_uid, cloudflare_status, ready_to_stream=''):
    with get_db().cursor() as cursor:
        update_query = """
            UPDATE guestbook
                SET thumbnail_url = %(thumbnail_url)s,
                    cloudflare_status = %(cloudflare_status)s,
                    cloudflare_uid = %(cloudflare_uid)s,
                    ready_to_stream = %(ready_to_stream)s
                WHERE s3_object_key = %(s3_object_key)s;
        """
        cursor.execute(update_query, {'s3_object_key': s3_object_key,
                                      'cloudflare_uid': cloudflare_uid, 
                                      'thumbnail_url': thumbnail_url,
                                      'cloudflare_status': cloudflare_status,
                                      'ready_to_stream': ready_to_stream})
        result = cursor.statusmessage

    return result

def update_readytostream_status(s3_object_key, cloudflare_uid, ready_to_stream_status):
    with get_db().cursor() as cursor:
        update_query = """
            UPDATE guestbook
                SET ready_to_stream = %(ready_to_stream_status)s
                WHERE s3_object_key = %(s3_object_key)s;
        """
        cursor.execute(update_query, {'s3_object_key': s3_object_key,
                                      'ready_to_stream_status': ready_to_stream_status})
        result = cursor.statusmessage

    return result

def get_all_entries():
    with get_db().cursor() as cursor:
        select_query = """
            SELECT * from guestbook;
        """
        cursor.execute(select_query)
        result = cursor.fetchall()

    return result
